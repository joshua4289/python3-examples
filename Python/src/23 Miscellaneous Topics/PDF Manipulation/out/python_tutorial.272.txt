 
Python
 
 
 
 
260
 
 
Python has been an object
-
oriented language 
since it existed
. Because of this, 
creating and using classes and objects are downright easy. This chapter helps you 
become an expert in using Python's object
-
oriented programming support.
 
If you do
 
n
o
t have any previous experience with object
-
oriented (OO) programming, 
you may want to consult an introductory course on it or at least a tutorial of some 
sort so that you 
have a grasp of the basic concepts.
 
However, here is small introduction of Object
-
Oriented Programming (OOP) to bring 
you at speed:
 
Overview of OOP Terminology
 

 
Class:
 
A user
-
defined prototype for an object that defines a set of attributes 
that characterize
 
any object of the class. The attributes are data members 
(class variables and instance variables) and methods, accessed via dot 
notation.
 

 
Class variable:
 
A variable that is shared by all instances of a class. Class 
variables are defined within a class but
 
outside any of the class's methods. 
Class variables are
 
n
o
t used as frequently as instance variables are.
 

 
Data member:
 
A class variable or instance variable that holds data associated 
with a class and its objects.
 

 
Function overloading:
 
The assignment of 
more than one behavior to a 
particular function. The operation performed varies by the types of objects 
or 
arguments
 
involved.
 

 
Instance variable:
 
A variable that is defined inside a method and belongs 
only to the current instance of a class.
 

 
Inheritance
:
 
The transfer of the characteristics of a class to other classes that 
are derived from it.
 

 
Instance:
 
An individual object of a certain class. An object obj that belongs to 
a class Circle, for example, is an instance of the class Circle.
 

 
Instantiation
:
 
Th
e creation of an instance of a class.
 

 
Method
:
 
A special kind of function that is defined in a class definition.
 
18.
 
CLASSES AND OBJECTS
 
