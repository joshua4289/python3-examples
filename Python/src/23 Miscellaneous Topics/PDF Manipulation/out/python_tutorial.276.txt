 
Python
 
 
 
 
264
 
 
Name
 
:
  
Zara
 
,
Salary
:
  
2000
 
Name
 
:
  
Manni
 
,
Salary
:
  
5000
 
Total
 
Employee
 
2
 
You can add, remove
,
 
or modify attributes of classes and objects at any time:
 
emp1
.
age 
=
 
7
  
# Add an 'age' attribute.
 
emp1
.
age 
=
 
8
  
# Modify 'age' attribute.
 
del
 
emp1
.
age  
# Delete 'age' attribute.
 
Instead of using the normal statements to access attributes, you can use 
the 
f
ollowing 
functions:
 

 
The
 
getattr(obj, name[, default])
 
: to access the attribute of object.
 

 
The
 
hasattr(obj,name)
 
: to check if an attribute exists or not.
 

 
The
 
setattr(obj,name,value)
 
: to set an attribute. If attribute does not exist, 
then it would be crea
ted.
 

 
The
 
delattr(obj, name)
 
: to delete an attribute.
 
hasattr
(
emp1
,
 
'age'
)
    
# Returns true if 'age' attribute exists
 
getattr
(
emp1
,
 
'age'
)
    
# Returns value of 'age' attribute
 
setattr
(
emp1
,
 
'age'
,
 
8
)
 
# Set attribute 'age' at 8
 
delattr
(
empl
,
 
'age'
)
    
# 
Delete attribute 'age'
 
Built
-
In Class Attributes
 
Every Python class keeps following built
-
in attributes and they can be accessed using 
dot operator like any other attribute:
 

 
__dict__
:
 
Dictionary containing the class's namespace.
 

 
__doc__
:
 
Class documenta
tion string or 
n
one
,
 
if undefined.
 

 
__name__:
 
Class name.
 

 
__module__:
 
Module name in which the class is defined. This attribute is 
"__main__" in interactive mode.
 
