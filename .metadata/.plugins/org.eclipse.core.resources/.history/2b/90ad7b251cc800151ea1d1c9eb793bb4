import numpy as np
import matplotlib.pyplot as plt
import scipy.ndimage as ndimage 

def set_title(title):
    figure = plt.gcf()
    figure.canvas.set_window_title(title)

data = np.array(
        [ 
            [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
            [[0,0,0],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[0,0,0],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[0,0,0]],
            [[0,0,0],[1,1,1],[1,1,1],[0,0,0],[1,1,1],[0,0,0],[1,1,1],[0,0,0],[0,0,0],[1,1,1],[0,0,0]],
            [[0,0,0],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[0,0,0],[1,1,1],[0,0,0],[0,0,0],[1,1,1],[0,0,0]],
            [[0,0,0],[1,1,1],[1,1,1],[0,0,0],[0,0,0],[0,0,0],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[0,0,0]],
            [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
            [[0,0,0],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[0,0,0],[0,0,0],[1,1,1],[1,1,1],[1,1,1],[0,0,0]],
            [[0,0,0],[0,0,0],[1,1,1],[0,0,0],[1,1,1],[0,0,0],[0,0,0],[1,1,1],[0,0,0],[1,1,1],[0,0,0]],
            [[0,0,0],[1,1,1],[1,1,1],[0,0,0],[1,1,1],[0,0,0],[0,0,0],[1,1,1],[0,0,0],[1,1,1],[0,0,0]],
            [[0,0,0],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[1,1,1],[0,0,0],[1,1,1],[1,1,1],[1,1,1],[0,0,0]],
            [[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0],[0,0,0]],
        ],
    )

# data = np.vstack((data, data))
# data = np.hstack((data, data))
# data = np.vstack((data, data))
# data = np.hstack((data, data))

set_title("plot uses interpolation by default")
# plt.imshow(data)
# plt.show()

set_title("switch off interpolation")
# plt.imshow(data, interpolation = "none")
# plt.show()

set_title("convert to single channel and fill holes")
data = data[:,:,0]
filled = ndimage.binary_fill_holes(data).astype(int)
# plt.imshow(filled, interpolation = "none", cmap = "jet")
# plt.show()


labels, numberOfObjects = ndimage.label(filled)
set_title("label objects: {} objects found".format(numberOfObjects))
# plt.imshow(labels, interpolation = "none", cmap = "jet")
# plt.show()

hist = []

def analyze(x):
    xmin = x.min()
    xmax = x.max()
    xmean = x.mean()
    xhist = np.histogram(x, range=(xmin, xmax))
    hist.append({'min': xmin,
                 'max': xmax,
                 'mean': xmean,
                 'hist': xhist})
    return 1

lbl, nlbl = ndimage.label(filled)
lbls = np.arange(1, nlbl + 1)
ndimage.labeled_comprehension(filled, lbl, lbls, analyze, float, -1)
print data
print
print lbl
print
print hist
print hist[0]['hist']
plt.hist(hist[0]['hist'])
plt.show()
exit()
from skimage.measure import label, regionprops
import math
labels = label(filled)
regions = regionprops(labels)
for props in regions:
    y0, x0 = props.centroid
    orientation = props.orientation
    x1 = x0 + math.cos(orientation) * 0.5 * props.major_axis_length
    y1 = y0 - math.sin(orientation) * 0.5 * props.major_axis_length
    x2 = x0 - math.sin(orientation) * 0.5 * props.minor_axis_length
    y2 = y0 - math.cos(orientation) * 0.5 * props.minor_axis_length
    print "centroid: [{:.2},{:.2}]".format(x0, y0)
    print "x1, y1: [{:.2},{:.2}]".format(x1, y1)
    print "x2, y2: [{:.2},{:.2}]".format(x2, y2)
    print props.__dict__